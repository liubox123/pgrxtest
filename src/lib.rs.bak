//LICENSE Portions Copyright 2019-2021 ZomboDB, LLC.
//LICENSE
//LICENSE Portions Copyright 2021-2023 Technology Concepts & Design, Inc.
//LICENSE
//LICENSE Portions Copyright 2023-2023 PgCentral Foundation, Inc. <contact@pgcentral.org>
//LICENSE
//LICENSE All rights reserved.
//LICENSE
//LICENSE Use of this source code is governed by the MIT license that can be found in the LICENSE file.
use pgrx::bgworkers::*;
use pgrx::datum::{FromDatum, IntoDatum};
use pgrx::prelude::*;
use std::time::Duration;
use std::thread;
use actix_web::{middleware, rt, web, App, HttpRequest, HttpServer};

use std::sync::Mutex;
use std::sync::Arc;
/*
    In order to use this bgworker with pgrx, you'll need to edit the proper `postgresql.conf` file in
    `~/.pgrx/data-PGVER/postgresql.conf` and add this line to the end:

    ```
    shared_preload_libraries = 'bgworker.so'
    ```

    Background workers **must** be initialized in the extension's `_PG_init()` function, and can **only**
    be started if loaded through the `shared_preload_libraries` configuration setting.

    Executing `cargo pgrx run <PGVER>` will, when it restarts the specified Postgres instance, also start
    this background worker
*/

pgrx::pg_module_magic!();

#[pg_guard]
pub extern "C" fn _PG_init() {
    BackgroundWorkerBuilder::new("Background Worker Example")
        .set_function("background_worker_main")
        .set_library("pgbgtest")
        .set_argument(55i32.into_datum())
        .enable_spi_access()
        .load();
    // let handletest  = thread::spawn(move ||{println!("1111");});
    // handletest.join().expect("msxxxxxg");
}

async fn index(req: HttpRequest) -> &'static str {
    println!("REQ: {:?}", req);

    
    let objects = Arc::new(Mutex::new(String::from("")));
    println!("REQ:2");
    let clone = Arc::clone(&objects);
    // BackgroundWorker::get_extra()
    // BackgroundWorker::worker_continue()
    // BackgroundWorker::connect_worker_to_spi(Some("postgres"), None);
    println!("REQ:3");
    let mut outstr2 = String::from("");
    let outstr = Mutex::new(String::from(""));
    let result: Result<(), pgrx::spi::Error> = BackgroundWorker::transaction(move || {
        println!("do do do \n");
        Spi::connect(move |client| {
            // let mut retstr = String::from("");
            let tuple_table = client.select(
                "SELECT 'Hi', id, ''||a FROM (SELECT id, 43 from generate_series(1,10) id) a ",
                None,
                None,
            ).unwrap();
            for tuple in tuple_table {
                // let x = tuple.get_datum_by_ordinal(1).unwrap()
                let a = tuple.get_datum_by_ordinal(1).unwrap().value::<String>().unwrap();
                let b = tuple.get_datum_by_ordinal(2).unwrap().value::<i32>().unwrap();
                let c = tuple.get_datum_by_ordinal(3).unwrap().value::<String>().unwrap();
                // let mut obj_clone = *clone.lock().unwrap();
                println!("{}\n",a.unwrap());
                // (*clone.lock().unwrap()).push_str(format!("{}",a.unwrap()).as_str());
                
                println!("{}",clone.lock().unwrap());
                // obj_clone =obj_clone.push_str(String::from(a.unwrap()) + &String::from("\t") + &b.unwrap().to_string() + &String::from("\t")+ &c.unwrap());  
                // *outstr.lock().unwrap() = retstr.clone();
                // retstr =retstr+ &a.unwrap() + &String::from("\t") + &b.unwrap().to_string() + &String::from("\t")+ &c.unwrap();
                // // log!("from bgworker: ({:?}, {:?}, {:?})", a, b, c);
            }
            Ok(())
        })
    });
    println!("REQ:4");
    // let ret = *objects.lock().unwrap();
    //     ret
    
    let ssss = format!("{}", objects.lock().unwrap());
    println!("{}",ssss);
    "hello "
    // Box::leak(ssss.into_boxed_str())
        // let x = Box::leak( (*objects.lock().unwrap()).into_boxed_str()); x
    // Box::leak(outstr.into_boxed_str())
    // result.unwrap()
    // "Hello world!\r\n"
}
#[pg_guard]
#[no_mangle]
pub extern "C" fn background_worker_main(arg: pg_sys::Datum) {
    let arg = unsafe { i32::from_polymorphic_datum(arg, false, pg_sys::INT4OID) };

    // these are the signals we want to receive.  If we don't attach the SIGTERM handler, then
    // we'll never be able to exit via an external notification
    BackgroundWorker::attach_signal_handlers(SignalWakeFlags::SIGHUP | SignalWakeFlags::SIGTERM);

    // we want to be able to use SPI against the specified database (postgres), as the superuser which
    // did the initdb. You can specify a specific user with Some("my_user")
    BackgroundWorker::connect_worker_to_spi(Some("postgres"), None);

    println!(
        "Hello from inside the {} BGWorker!  Argument value={}",
        BackgroundWorker::get_name(),
        arg.unwrap()
    );
    // let handletest  = thread::spawn(move||{        println!(
    //     "ttttttttt {} BGWorker!  ",
    //     BackgroundWorker::get_name()
    //     // arg.unwrap()
    // );});
    // handletest.join().expect("msxxxxxg");

    let handle =thread::spawn(move||{
        
        println!(
            "start local thread for server {} BGWorker!  ",
            BackgroundWorker::get_name()
        );
        let htser =  HttpServer::new(move|| {
            App::new().service(web::resource("/").route(web::get().to(index)))
        })

        .bind(("0.0.0.0", 18580));
        match htser {
            Ok(v)=>{
                rt::System::new().block_on(v.run());
            },
            Err(e)=>{
                println!(
                    "bind error {} BGWorker!  ",
                    BackgroundWorker::get_name()
                );
            }
        }
        //  rt::System::new().block_on(
        //     match (
       
        // );
        
        println!(
            "end local thread for server {} BGWorker!  ",
            BackgroundWorker::get_name()
            // arg.unwrap()
        );
});
    // let rh = 
    // handle.join();
    // match rh {
    //     Ok(v)=>{}
    //     ,
    //     Err(e)=>{
    //         log!(
    //             "err in run  {} BGWorker! error: {:#?}",
    //             BackgroundWorker::get_name(),e
    //             // arg.unwrap()
    //         );
    //     }
    // }
    // BackgroundWorker::transaction(transaction_body)
    // wake up every 10s or if we received a SIGTERM
    while BackgroundWorker::wait_latch(Some(Duration::from_secs(10))) {
        if BackgroundWorker::sighup_received() {
            // on SIGHUP, you might want to reload some external configuration or something
        }

        // within a transaction, execute an SQL statement, and log its results
        let result: Result<(), pgrx::spi::Error> = BackgroundWorker::transaction(|| {
            println!("xxxxxxxxxxxxx\n");
            Spi::connect(|client| {
                let tuple_table = client.select(
                    "SELECT 'Hi', id, ''||a FROM (SELECT id, 43 from generate_series(1,10) id) a ",
                    None,
                    None,
                )?;
                for tuple in tuple_table {
                    let a = tuple.get_datum_by_ordinal(1)?.value::<String>()?;
                    let b = tuple.get_datum_by_ordinal(2)?.value::<i32>()?;
                    let c = tuple.get_datum_by_ordinal(3)?.value::<String>()?;
                    // log!("from bgworker: ({:?}, {:?}, {:?})", a, b, c);
                }
                Ok(())
            })
        });
        result.unwrap_or_else(|e| panic!("got an error: {}", e))
    }

    log!("Goodbye from inside the {} BGWorker! ", BackgroundWorker::get_name());
}